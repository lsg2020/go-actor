// Code generated by protoc-gen-goactor. DO NOT EDIT.
// source: game.proto

package message

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	go_actor "github.com/lsg2020/go-actor"
)

// ManagerServiceInterface is the server API for ManagerService service.
type ManagerServiceInterface interface {
	OnNewGame(*go_actor.DispatchMessage, *ManagerNewGameRequest) (*ManagerNewGameResponse, error)
	OnGetGame(*go_actor.DispatchMessage, *ManagerGetGameRequest) (*ManagerGetGameResponse, error)
	OnGameList(*go_actor.DispatchMessage, *ManagerGameListRequest) (*ManagerGameListResponse, error)
	OnFreeGame(*go_actor.DispatchMessage, *ManagerFreeGameRequest) (*ManagerFreeGameResponse, error)
}

func RegisterManagerService(s ManagerServiceInterface, proto go_actor.Proto) {
	reg := &ManagerServiceProto{s: s}
	reg.register(proto)
}
func NewManagerServiceClient(proto go_actor.Proto) *ManagerServiceClient {
	client := &ManagerServiceClient{Proto: proto}
	return client
}

type ManagerServiceProto struct {
	s ManagerServiceInterface
}

func (s *ManagerServiceProto) register(p go_actor.Proto) {
	p.Register(
		"ManagerService.NewGame",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnNewGame(ctx, args[0].(*ManagerNewGameRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(ManagerNewGameRequest) },
		func() proto.Message { return new(ManagerNewGameResponse) },
	)

	p.Register(
		"ManagerService.GetGame",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnGetGame(ctx, args[0].(*ManagerGetGameRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(ManagerGetGameRequest) },
		func() proto.Message { return new(ManagerGetGameResponse) },
	)

	p.Register(
		"ManagerService.GameList",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnGameList(ctx, args[0].(*ManagerGameListRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(ManagerGameListRequest) },
		func() proto.Message { return new(ManagerGameListResponse) },
	)

	p.Register(
		"ManagerService.FreeGame",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnFreeGame(ctx, args[0].(*ManagerFreeGameRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(ManagerFreeGameRequest) },
		func() proto.Message { return new(ManagerFreeGameResponse) },
	)

}

type ManagerServiceClient struct {
	Proto go_actor.Proto
}

func (client *ManagerServiceClient) NewGame(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *ManagerNewGameRequest, options *go_actor.CallOptions) (*ManagerNewGameResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "ManagerService.NewGame", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*ManagerNewGameResponse), nil
}

func (client *ManagerServiceClient) GetGame(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *ManagerGetGameRequest, options *go_actor.CallOptions) (*ManagerGetGameResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "ManagerService.GetGame", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*ManagerGetGameResponse), nil
}

func (client *ManagerServiceClient) GameList(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *ManagerGameListRequest, options *go_actor.CallOptions) (*ManagerGameListResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "ManagerService.GameList", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*ManagerGameListResponse), nil
}

func (client *ManagerServiceClient) FreeGame(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *ManagerFreeGameRequest, options *go_actor.CallOptions) (*ManagerFreeGameResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "ManagerService.FreeGame", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*ManagerFreeGameResponse), nil
}

// PlayerServiceInterface is the server API for PlayerService service.
type PlayerServiceInterface interface {
	OnSetName(*go_actor.DispatchMessage, *PlayerSetNameRequest) (*PlayerSetNameResponse, error)
	OnIndex(*go_actor.DispatchMessage, *PlayerIndexRequest) (*PlayerIndexResponse, error)
	OnCreateGame(*go_actor.DispatchMessage, *PlayerCreateGameRequest) (*PlayerCreateGameResponse, error)
	OnGetMoves(*go_actor.DispatchMessage, *PlayerGetMovesRequest) (*PlayerGetMovesResponse, error)
	OnMakeMove(*go_actor.DispatchMessage, *PlayerMakeMoveRequest) (*PlayerMakeMoveResponse, error)
	OnJoin(*go_actor.DispatchMessage, *PlayerJoinRequest) (*PlayerJoinResponse, error)
	OnOnJoinGame(*go_actor.DispatchMessage, *PlayerOnJoinGameRequest) (*PlayerOnJoinGameResponse, error)
	OnOnLeaveGame(*go_actor.DispatchMessage, *PlayerOnLeaveGameRequest) (*PlayerOnLeaveGameResponse, error)
}

func RegisterPlayerService(s PlayerServiceInterface, proto go_actor.Proto) {
	reg := &PlayerServiceProto{s: s}
	reg.register(proto)
}
func NewPlayerServiceClient(proto go_actor.Proto) *PlayerServiceClient {
	client := &PlayerServiceClient{Proto: proto}
	return client
}

type PlayerServiceProto struct {
	s PlayerServiceInterface
}

func (s *PlayerServiceProto) register(p go_actor.Proto) {
	p.Register(
		"PlayerService.SetName",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnSetName(ctx, args[0].(*PlayerSetNameRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerSetNameRequest) },
		func() proto.Message { return new(PlayerSetNameResponse) },
	)

	p.Register(
		"PlayerService.Index",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnIndex(ctx, args[0].(*PlayerIndexRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerIndexRequest) },
		func() proto.Message { return new(PlayerIndexResponse) },
	)

	p.Register(
		"PlayerService.CreateGame",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnCreateGame(ctx, args[0].(*PlayerCreateGameRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerCreateGameRequest) },
		func() proto.Message { return new(PlayerCreateGameResponse) },
	)

	p.Register(
		"PlayerService.GetMoves",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnGetMoves(ctx, args[0].(*PlayerGetMovesRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerGetMovesRequest) },
		func() proto.Message { return new(PlayerGetMovesResponse) },
	)

	p.Register(
		"PlayerService.MakeMove",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnMakeMove(ctx, args[0].(*PlayerMakeMoveRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerMakeMoveRequest) },
		func() proto.Message { return new(PlayerMakeMoveResponse) },
	)

	p.Register(
		"PlayerService.Join",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnJoin(ctx, args[0].(*PlayerJoinRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerJoinRequest) },
		func() proto.Message { return new(PlayerJoinResponse) },
	)

	p.Register(
		"PlayerService.OnJoinGame",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnOnJoinGame(ctx, args[0].(*PlayerOnJoinGameRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerOnJoinGameRequest) },
		func() proto.Message { return new(PlayerOnJoinGameResponse) },
	)

	p.Register(
		"PlayerService.OnLeaveGame",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnOnLeaveGame(ctx, args[0].(*PlayerOnLeaveGameRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(PlayerOnLeaveGameRequest) },
		func() proto.Message { return new(PlayerOnLeaveGameResponse) },
	)

}

type PlayerServiceClient struct {
	Proto go_actor.Proto
}

func (client *PlayerServiceClient) SetName(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerSetNameRequest, options *go_actor.CallOptions) (*PlayerSetNameResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.SetName", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerSetNameResponse), nil
}

func (client *PlayerServiceClient) Index(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerIndexRequest, options *go_actor.CallOptions) (*PlayerIndexResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.Index", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerIndexResponse), nil
}

func (client *PlayerServiceClient) CreateGame(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerCreateGameRequest, options *go_actor.CallOptions) (*PlayerCreateGameResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.CreateGame", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerCreateGameResponse), nil
}

func (client *PlayerServiceClient) GetMoves(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerGetMovesRequest, options *go_actor.CallOptions) (*PlayerGetMovesResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.GetMoves", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerGetMovesResponse), nil
}

func (client *PlayerServiceClient) MakeMove(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerMakeMoveRequest, options *go_actor.CallOptions) (*PlayerMakeMoveResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.MakeMove", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerMakeMoveResponse), nil
}

func (client *PlayerServiceClient) Join(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerJoinRequest, options *go_actor.CallOptions) (*PlayerJoinResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.Join", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerJoinResponse), nil
}

func (client *PlayerServiceClient) OnJoinGame(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerOnJoinGameRequest, options *go_actor.CallOptions) (*PlayerOnJoinGameResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.OnJoinGame", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerOnJoinGameResponse), nil
}

func (client *PlayerServiceClient) OnLeaveGame(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *PlayerOnLeaveGameRequest, options *go_actor.CallOptions) (*PlayerOnLeaveGameResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "PlayerService.OnLeaveGame", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*PlayerOnLeaveGameResponse), nil
}

// GameServiceInterface is the server API for GameService service.
type GameServiceInterface interface {
	OnJoin(*go_actor.DispatchMessage, *GameJoinRequest) (*GameJoinResponse, error)
	OnLeave(*go_actor.DispatchMessage, *GameLeaveRequest) (*GameLeaveResponse, error)
	OnInfo(*go_actor.DispatchMessage, *GameInfoRequest) (*GameInfoResponse, error)
	OnGetMoves(*go_actor.DispatchMessage, *GameGetMovesRequest) (*GameGetMovesResponse, error)
	OnMakeMove(*go_actor.DispatchMessage, *GameMakeMoveRequest) (*GameMakeMoveResponse, error)
}

func RegisterGameService(s GameServiceInterface, proto go_actor.Proto) {
	reg := &GameServiceProto{s: s}
	reg.register(proto)
}
func NewGameServiceClient(proto go_actor.Proto) *GameServiceClient {
	client := &GameServiceClient{Proto: proto}
	return client
}

type GameServiceProto struct {
	s GameServiceInterface
}

func (s *GameServiceProto) register(p go_actor.Proto) {
	p.Register(
		"GameService.Join",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnJoin(ctx, args[0].(*GameJoinRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(GameJoinRequest) },
		func() proto.Message { return new(GameJoinResponse) },
	)

	p.Register(
		"GameService.Leave",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnLeave(ctx, args[0].(*GameLeaveRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(GameLeaveRequest) },
		func() proto.Message { return new(GameLeaveResponse) },
	)

	p.Register(
		"GameService.Info",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnInfo(ctx, args[0].(*GameInfoRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(GameInfoRequest) },
		func() proto.Message { return new(GameInfoResponse) },
	)

	p.Register(
		"GameService.GetMoves",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnGetMoves(ctx, args[0].(*GameGetMovesRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(GameGetMovesRequest) },
		func() proto.Message { return new(GameGetMovesResponse) },
	)

	p.Register(
		"GameService.MakeMove",
		func(ctx *go_actor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnMakeMove(ctx, args[0].(*GameMakeMoveRequest))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(GameMakeMoveRequest) },
		func() proto.Message { return new(GameMakeMoveResponse) },
	)

}

type GameServiceClient struct {
	Proto go_actor.Proto
}

func (client *GameServiceClient) Join(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *GameJoinRequest, options *go_actor.CallOptions) (*GameJoinResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "GameService.Join", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*GameJoinResponse), nil
}

func (client *GameServiceClient) Leave(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *GameLeaveRequest, options *go_actor.CallOptions) (*GameLeaveResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "GameService.Leave", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*GameLeaveResponse), nil
}

func (client *GameServiceClient) Info(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *GameInfoRequest, options *go_actor.CallOptions) (*GameInfoResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "GameService.Info", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*GameInfoResponse), nil
}

func (client *GameServiceClient) GetMoves(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *GameGetMovesRequest, options *go_actor.CallOptions) (*GameGetMovesResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "GameService.GetMoves", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*GameGetMovesResponse), nil
}

func (client *GameServiceClient) MakeMove(ctx context.Context, system *go_actor.ActorSystem, actor go_actor.Actor, dest *go_actor.ActorAddr, req *GameMakeMoveRequest, options *go_actor.CallOptions) (*GameMakeMoveResponse, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "GameService.MakeMove", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*GameMakeMoveResponse), nil
}
