// Code generated by protoc-gen-goactor. DO NOT EDIT.
// source: hello.proto

package hello

import (
	context "context"
	goactor "github.com/lsg2020/go-actor"
	proto "google.golang.org/protobuf/proto"
)

// HelloServiceInterface is the server API for HelloService service.
type HelloServiceInterface interface {
	// onlysend;test send protocol
	OnSend(*goactor.DispatchMessage, *Request) error
	OnAdd(*goactor.DispatchMessage, *Request) (*Response, error)
	OnTestCallAdd(*goactor.DispatchMessage, *Request) (*Response, error)
}

func RegisterHelloService(s HelloServiceInterface, proto goactor.Proto) {
	reg := &HelloServiceProto{s: s}
	reg.register(proto)
}
func NewHelloServiceClient(proto goactor.Proto) *HelloServiceClient {
	client := &HelloServiceClient{Proto: proto}
	return client
}

type HelloServiceProto struct {
	s HelloServiceInterface
}

func (s *HelloServiceProto) register(p goactor.Proto) {
	p.Register(
		"HelloService.Send",
		func(ctx *goactor.DispatchMessage, args ...interface{}) error {
			err := s.s.OnSend(ctx, args[0].(*Request))
			if err != nil {
				ctx.System.Logger().Errorf("message process error:%#v", err.Error())
				return err
			}
			return nil
		},
		func() proto.Message { return new(Request) },
		func() proto.Message { return new(Empty) },
	)

	p.Register(
		"HelloService.Add",
		func(ctx *goactor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnAdd(ctx, args[0].(*Request))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(Request) },
		func() proto.Message { return new(Response) },
	)

	p.Register(
		"HelloService.TestCallAdd",
		func(ctx *goactor.DispatchMessage, args ...interface{}) error {
			rsp, err := s.s.OnTestCallAdd(ctx, args[0].(*Request))

			if err != nil {
				ctx.Response(err, nil)
			} else {
				ctx.Response(nil, rsp)
			}
			return nil
		},
		func() proto.Message { return new(Request) },
		func() proto.Message { return new(Response) },
	)

}

type HelloServiceClient struct {
	Proto goactor.Proto
}

func (client *HelloServiceClient) Send(system *goactor.ActorSystem, actor goactor.Actor, dest *goactor.ActorAddr, req *Request, options *goactor.CallOptions) error {
	err := actor.SendProto(system, dest, client.Proto.Id(), options, "HelloService.Send", req)

	return err
}

func (client *HelloServiceClient) Add(ctx context.Context, system *goactor.ActorSystem, actor goactor.Actor, dest *goactor.ActorAddr, req *Request, options *goactor.CallOptions) (*Response, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "HelloService.Add", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*Response), nil
}

func (client *HelloServiceClient) TestCallAdd(ctx context.Context, system *goactor.ActorSystem, actor goactor.Actor, dest *goactor.ActorAddr, req *Request, options *goactor.CallOptions) (*Response, error) {
	rsp, err := actor.CallProto(ctx, system, dest, client.Proto.Id(), options, "HelloService.TestCallAdd", req)

	if err != nil {
		return nil, err
	}
	return rsp[0].(*Response), nil
}
